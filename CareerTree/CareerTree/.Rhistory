# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"careertree2018"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ctdb_test",
host = "careertreetest.cytukzawpi8t.ap-southeast-2.rds.amazonaws.com", port = 5432,
user = "careertreetest", password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# TRUE
#########################################################################################################
# query the data from postgreSQL
percentage <- dbGetQuery(con, "SELECT * from percentage")
# create variable use for dataframe
distance = 100 - percentage$percentage
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"careertree2018"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ctdb_test",
host = "careertreetest.cytukzawpi8t.ap-southeast-2.rds.amazonaws.com", port = 5432,
user = "careertreetest", password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# TRUE
#########################################################################################################
# query the data from postgreSQL
percentage <- dbGetQuery(con, "SELECT * from percentage")
# create variable use for dataframe
distance = 100 - percentage$percentage
nodeTimes = length(percentage$title)
allNodes = c(unique(percentage$title),percentage$relatedtitle)
# Implement Shiny
require(shiny)
require(visNetwork)
server <- function(input, output) {
output$network <- renderVisNetwork({
test_nodes01 <- data.frame(id = allNodes,
label = allNodes,
value = c(0, percentage$percentage),
shape = c("star", rep("dot", times = nodeTimes)),
color = c("lightslateblue", rep("lightskyblue", times = nodeTimes)),
title = c(0, percentage$percentage), stringsAsFactors = FALSE
)
test_edges01 <- data.frame( from = percentage$title,
to = percentage$relatedtitle,
#                                label = paste("Edge", 1:nodeTimes),
length = distance
)
visNetwork(test_nodes01, test_edges01, height = "600px", width = "100%")%>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T), nodesIdSelection = TRUE)%>%
visEdges(arrows = "to")%>%
visInteraction(hover = TRUE)
})
}
ui <- fluidPage(
visNetworkOutput("network")
)
# Run Shiny APP
shinyApp(ui = ui, server = server)
# Delete table
emptyTable<- dbGetQuery(con, "DELETE FROM percentage")
# install.packages("RPostgreSQL")
require("RPostgreSQL")
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"careertree2018"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# install.packages("RPostgreSQL")
install.packages("dbDriver")
# install.packages("RPostgreSQL")
install.packages("DBIDriver")
require("RPostgreSQL")
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"careertree2018"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ctdb_test",
host = "careertreetest.cytukzawpi8t.ap-southeast-2.rds.amazonaws.com", port = 5432,
user = "careertreetest", password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# TRUE
#########################################################################################################
# query the data from postgreSQL
percentage <- dbGetQuery(con, "SELECT * from percentage")
# create variable use for dataframe
distance = 100 - percentage$percentage
nodeTimes = length(percentage$title)
allNodes = c(unique(percentage$title),percentage$relatedtitle)
# Implement Shiny
require(shiny)
require(visNetwork)
server <- function(input, output) {
output$network <- renderVisNetwork({
test_nodes01 <- data.frame(id = allNodes,
label = allNodes,
value = c(0, percentage$percentage),
shape = c("star", rep("dot", times = nodeTimes)),
color = c("lightslateblue", rep("lightskyblue", times = nodeTimes)),
title = c(0, percentage$percentage), stringsAsFactors = FALSE
)
test_edges01 <- data.frame( from = percentage$title,
to = percentage$relatedtitle,
#                                label = paste("Edge", 1:nodeTimes),
length = distance
)
visNetwork(test_nodes01, test_edges01, height = "600px", width = "100%")%>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T), nodesIdSelection = TRUE)%>%
visEdges(arrows = "to")%>%
visInteraction(hover = TRUE)
})
}
ui <- fluidPage(
visNetworkOutput("network")
)
# Run Shiny APP
shinyApp(ui = ui, server = server)
# install.packages("RPostgreSQL")
install.packages("dbDriver")
# install.packages("RPostgreSQL")
require("RPostgreSQL")
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"careertree2018"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ctdb_test",
host = "careertreetest.cytukzawpi8t.ap-southeast-2.rds.amazonaws.com", port = 5432,
user = "careertreetest", password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# TRUE
#########################################################################################################
# query the data from postgreSQL
percentage <- dbGetQuery(con, "SELECT * from percentage")
# create variable use for dataframe
distance = 100 - percentage$percentage
nodeTimes = length(percentage$title)
allNodes = c(unique(percentage$title),percentage$relatedtitle)
# Implement Shiny
require(shiny)
require(visNetwork)
server <- function(input, output) {
output$network <- renderVisNetwork({
test_nodes01 <- data.frame(id = allNodes,
label = allNodes,
value = c(0, percentage$percentage),
shape = c("star", rep("dot", times = nodeTimes)),
color = c("lightslateblue", rep("lightskyblue", times = nodeTimes)),
title = c(0, percentage$percentage), stringsAsFactors = FALSE
)
test_edges01 <- data.frame( from = percentage$title,
to = percentage$relatedtitle,
#                                label = paste("Edge", 1:nodeTimes),
length = distance
)
visNetwork(test_nodes01, test_edges01, height = "600px", width = "100%")%>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T), nodesIdSelection = TRUE)%>%
visEdges(arrows = "to")%>%
visInteraction(hover = TRUE)
})
}
ui <- fluidPage(
visNetworkOutput("network")
)
# Run Shiny APP
shinyApp(ui = ui, server = server)
# Delete table
emptyTable<- dbGetQuery(con, "DELETE FROM percentage")
# install.packages("RPostgreSQL")
require("RPostgreSQL")
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"careertree2018"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ctdb_test",
host = "careertreetest.cytukzawpi8t.ap-southeast-2.rds.amazonaws.com", port = 5432,
user = "careertreetest", password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# TRUE
#########################################################################################################
# query the data from postgreSQL
percentage <- dbGetQuery(con, "SELECT * from percentage")
# create variable use for dataframe
distance = 100 - percentage$percentage
nodeTimes = length(percentage$title)
allNodes = c(unique(percentage$title),percentage$relatedtitle)
# Implement Shiny
require(shiny)
require(visNetwork)
server <- function(input, output) {
output$network <- renderVisNetwork({
test_nodes01 <- data.frame(id = allNodes,
label = allNodes,
value = c(0, percentage$percentage),
shape = c("star", rep("dot", times = nodeTimes)),
color = c("lightslateblue", rep("lightskyblue", times = nodeTimes)),
title = c(0, percentage$percentage), stringsAsFactors = FALSE
)
test_edges01 <- data.frame( from = percentage$title,
to = percentage$relatedtitle,
#                                label = paste("Edge", 1:nodeTimes),
length = distance
)
visNetwork(test_nodes01, test_edges01, height = "600px", width = "100%")%>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T), nodesIdSelection = TRUE)%>%
visEdges(arrows = "to")%>%
visInteraction(hover = TRUE)
})
}
ui <- fluidPage(
visNetworkOutput("network")
)
# Run Shiny APP
shinyApp(ui = ui, server = server)
# Delete table
emptyTable<- dbGetQuery(con, "DELETE FROM percentage")
# install.packages("RPostgreSQL")
require("RPostgreSQL")
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"careertree2018"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ctdb_test",
host = "careertreetest.cytukzawpi8t.ap-southeast-2.rds.amazonaws.com", port = 5432,
user = "careertreetest", password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# TRUE
#########################################################################################################
# query the data from postgreSQL
percentage <- dbGetQuery(con, "SELECT * from percentage")
# create variable use for dataframe
distance = 100 - percentage$percentage
nodeTimes = length(percentage$title)
allNodes = c(unique(percentage$title),percentage$relatedtitle)
# Implement Shiny
require(shiny)
require(visNetwork)
server <- function(input, output) {
output$network <- renderVisNetwork({
test_nodes01 <- data.frame(id = allNodes,
label = allNodes,
value = c(0, percentage$percentage),
shape = c("star", rep("dot", times = nodeTimes)),
color = c("lightslateblue", rep("lightskyblue", times = nodeTimes)),
title = c(0, percentage$percentage), stringsAsFactors = FALSE
)
test_edges01 <- data.frame( from = percentage$title,
to = percentage$relatedtitle,
#                                label = paste("Edge", 1:nodeTimes),
length = distance
)
visNetwork(test_nodes01, test_edges01, height = "600px", width = "100%")%>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T), nodesIdSelection = TRUE)%>%
visEdges(arrows = "to")%>%
visInteraction(hover = TRUE)
})
}
ui <- fluidPage(
visNetworkOutput("network")
)
# Run Shiny APP
shinyApp(ui = ui, server = server)
# Delete table
emptyTable<- dbGetQuery(con, "DELETE FROM percentage")
# install.packages("RPostgreSQL")
require("RPostgreSQL")
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"careertree2018"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ctdb_test",
host = "careertreetest.cytukzawpi8t.ap-southeast-2.rds.amazonaws.com", port = 5432,
user = "careertreetest", password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# TRUE
#########################################################################################################
# query the data from postgreSQL
percentage <- dbGetQuery(con, "SELECT * from percentage")
# create variable use for dataframe
distance = 100 - percentage$percentage
nodeTimes = length(percentage$title)
allNodes = c(unique(percentage$title),percentage$relatedtitle)
# Implement Shiny
require(shiny)
require(visNetwork)
server <- function(input, output) {
output$network <- renderVisNetwork({
test_nodes01 <- data.frame(id = allNodes,
label = allNodes,
value = c(0, percentage$percentage),
shape = c("star", rep("dot", times = nodeTimes)),
color = c("lightslateblue", rep("lightskyblue", times = nodeTimes)),
title = c(0, percentage$percentage), stringsAsFactors = FALSE
)
test_edges01 <- data.frame( from = percentage$title,
to = percentage$relatedtitle,
#label = paste("Edge", 1:nodeTimes),
length = distance
)
visNetwork(test_nodes01, test_edges01, height = "700px", width = "100%")%>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T), selectedBy = "value")%>%
visEdges(arrows = "to", color = list(color = "lightblue", highlight = "orange"))%>%
visInteraction(hover = TRUE)%>%
visPhysics(stabilization = FALSE)
})
}
ui <- fluidPage(
visNetworkOutput("network")
)
# Run Shiny APP
shinyApp(ui = ui, server = server)
# Delete table
emptyTable<- dbGetQuery(con, "DELETE FROM percentage")
# install.packages("RPostgreSQL")
require("RPostgreSQL")
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"careertree2018"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ctdb_test",
host = "careertreetest.cytukzawpi8t.ap-southeast-2.rds.amazonaws.com", port = 5432,
user = "careertreetest", password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# TRUE
#########################################################################################################
# query the data from postgreSQL
percentage <- dbGetQuery(con, "SELECT * from percentage")
# create variable use for dataframe
distance = 100 - percentage$percentage
nodeTimes = length(percentage$title)
allNodes = c(unique(percentage$title),percentage$relatedtitle)
# Implement Shiny
require(shiny)
require(visNetwork)
server <- function(input, output) {
output$network <- renderVisNetwork({
test_nodes01 <- data.frame(id = allNodes,
label = allNodes,
value = c(0, percentage$percentage),
shape = c("star", rep("dot", times = nodeTimes)),
color = c("lightslateblue", rep("lightskyblue", times = nodeTimes)),
title = c(0, percentage$percentage), stringsAsFactors = FALSE
)
test_edges01 <- data.frame( from = percentage$title,
to = percentage$relatedtitle,
#label = paste("Edge", 1:nodeTimes),
length = distance
)
visNetwork(test_nodes01, test_edges01, height = "700px", width = "100%")%>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T), selectedBy = "value")%>%
visEdges(arrows = "to", color = list(color = "lightblue", highlight = "orange"))%>%
visInteraction(hover = TRUE)%>%
visPhysics(stabilization = FALSE)
})
}
ui <- fluidPage(
visNetworkOutput("network")
)
# Run Shiny APP
shinyApp(ui = ui, server = server)
# Delete table
emptyTable<- dbGetQuery(con, "DELETE FROM percentage")
# install.packages("RPostgreSQL")
require("RPostgreSQL")
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"careertree2018"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ctdb_test",
host = "careertreetest.cytukzawpi8t.ap-southeast-2.rds.amazonaws.com", port = 5432,
user = "careertreetest", password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# TRUE
#########################################################################################################
# query the data from postgreSQL
percentage <- dbGetQuery(con, "SELECT * from percentage")
# create variable use for dataframe
distance = 100 - percentage$percentage
nodeTimes = length(percentage$title)
allNodes = c(unique(percentage$title),percentage$relatedtitle)
# Implement Shiny
require(shiny)
require(visNetwork)
server <- function(input, output) {
output$network <- renderVisNetwork({
test_nodes01 <- data.frame(id = allNodes,
label = allNodes,
value = c(0, percentage$percentage),
shape = c("star", rep("dot", times = nodeTimes)),
color = c("lightslateblue", rep("lightskyblue", times = nodeTimes)),
title = c(0, percentage$percentage), stringsAsFactors = FALSE
)
test_edges01 <- data.frame( from = percentage$title,
to = percentage$relatedtitle,
#label = paste("Edge", 1:nodeTimes),
length = distance
)
visNetwork(test_nodes01, test_edges01, height = "700px", width = "100%")%>%
visOptions(highlightNearest = list(enabled = T, degree = 2, hover = T), selectedBy = "value")%>%
visEdges(arrows = "to", color = list(color = "lightblue", highlight = "orange"))%>%
visInteraction(hover = TRUE)%>%
visPhysics(stabilization = FALSE)
})
}
ui <- fluidPage(
visNetworkOutput("network")
)
# Run Shiny APP
shinyApp(ui = ui, server = server)
